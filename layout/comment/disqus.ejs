<% if (has_config('comment.shortname')) {
// Disqus supported languages.
// Last update at 4/18/2018
const SUPPORTED_LANGS = {
    'sq': 'Albanian',
    'ar': 'Arabic',
    'az': 'Azerbaijani',
    'eu': 'Basque',
    'ca': 'Catalan',
    'zh': 'Chinese',
    'cs': 'Czech',
    'da': 'Danish',
    'nl': 'Dutch',
    'en': 'English',
    'fi': 'Finnish',
    'fr': 'French',
    'de': 'German',
    'el': 'Greek',
    'he': 'Hebrew',
    'hu': 'Hungarian',
    'id': 'Indonesian',
    'it': 'Italian',
    'ja': 'Japanese',
    'ko': 'Korean',
    'lv': 'Latvian',
    'nb': 'Norwegian Bokmål',
    'fa': 'Persian',
    'pl': 'Polish',
    'pt': 'Portuguese',
    'pt_BR': 'Portuguese (Brazil)',
    'ro': 'Romanian',
    'ru': 'Russian',
    'sr': 'Serbian',
    'sr@latin': 'Serbian (Latin)',
    'sk': 'Slovak',
    'sl': 'Slovenian',
    'es_AR': 'Spanish (Argentina)',
    'es_MX': 'Spanish (Mexico)',
    'es_ES': 'Spanish (Spain)',
    'sv_SE': 'Swedish (Sweden)',
    'tr': 'Turkish',
    'uk': 'Ukrainian',
    'vec': 'Venetian'
};

function getDisqusLanguage(language) {
    const variant = language.split(/[-_]/).map((l, i) => i === 0 ? l.toLowerCase() : l.toUpperCase()).join('_');
    if (SUPPORTED_LANGS.hasOwnProperty(variant)) {
        return variant;
    }
    if (SUPPORTED_LANGS.hasOwnProperty(variant.split('_')[0])) {
        return variant.split('_')[0];
    }
    return 'en';
}
%>
<script>
    function loadDisqus(){
    var disqus_config = function () {
        this.page.url = '<%= page.permalink %>';
        this.page.identifier = '<%= page.disqusId || page.path %>';
        <% if (page_language()) { %>
        this.language = '<%= getDisqusLanguage(page_language()) %>';
        <% } %>
    };
    (function() {
        var d = document, s = d.createElement('script');  
        s.async = true;
        s.src = '//' + '<%= get_config('comment.shortname') %>' + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
}
    // 通过检查 window 对象确认是否在浏览器中运行
var runningOnBrowser = typeof window !== "undefined";
// 通过检查 scroll 事件 API 和 User-Agent 来匹配爬虫
var isBot = runningOnBrowser && !("onscroll" in window) || typeof navigator !== "undefined" && /(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i.test(navigator.userAgent);
// 检查当前浏览器是否支持 IntersectionObserver API
var supportsIntersectionObserver = runningOnBrowser && "IntersectionObserver" in window;

// 一个小 hack，将耗时任务包裹在 setTimeout(() => { }, 1) 中，可以推迟到 Event Loop 的任务队列中、等待主调用栈清空后才执行，在绝大部分浏览器中都有效
// 其实这个 hack 本来是用于优化骨架屏显示的。一些浏览器总是等 JavaScript 执行完了才开始页面渲染，导致骨架屏起不到降低 FCP 的优化效果，所以通过 hack 将耗时函数放到骨架屏渲染完成后再进行。
setTimeout(function () {
  if (!isBot && supportsIntersectionObserver) {
    // 当前环境不是爬虫、并且浏览器兼容 IntersectionObserver API
    var disqus_observer = new IntersectionObserver(function(entries) {
      // 当前视窗中已出现 Disqus 评论框所在位置
      if (entries[0].isIntersecting) {
        // 加载 Disqus
        loadDisqus();
        // 停止当前的 Observer
        disqus_observer.disconnect();
      }
    }, { threshold: [0] });
    // 设置让 Observer 观察 #disqus_thread 元素
    disqus_observer.observe(document.getElementById('disqus_thread'));
  } else {
    // 当前环境是爬虫、或当前浏览器其不兼容 IntersectionObserver API
    // 直接加载 Disqus
    loadDisqus();
  }
}, 1);
</script>
<% } %>
<div id="disqus_thread">
    <% if (!has_config('comment.shortname')) { %>
    <div class="notification is-danger">
        You forgot to set the <code>shortname</code> for Disqus. Please set it in <code>_config.yml</code>.
    </div>
    <% } %>
    <noscript>Please enable JavaScript to view the <a href="//disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
</div>